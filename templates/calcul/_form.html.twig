<div class="form-container" style="width: 75%">
    
    {{ form_start(form, {'attr': {'id': 'regForm'}})}} 
    {{ form_row(form._token) }}
    <div class="tab">
        <div>
            {{ form_label(form.title) }}
            <div class="">{{ form_widget(form.title, {'attr': {'onInput': 'this.className = ""', 'class': 'input'}}) }}</div>
            
            {% if not form.title.vars.valid %}
                <div class="error-message">
                    {{ form_errors(form.title) }}
                </div>
            {% endif %}
            
        </div>
        <div>
            {{ form_label(form.devis) }}
            <div class="">{{ form_widget(form.devis, {'attr': {'onInput': 'this.className = ""', 'class': 'input'}}) }}</div>
            {% if not form.devis.vars.valid %}
                <div class="error-message">
                    {{ form_errors(form.devis) }}
                </div>
            {% endif %}
        </div>        
        <div>
            {{ form_label(form.durationMonth) }}
            <div class="">{{ form_widget(form.durationMonth, {'attr': {'onInput': 'this.className = ""', 'class': 'input'}}) }}</div>
            {% if not form.durationMonth.vars.valid %}
                <div class="error-message">
                    {{ form_errors(form.durationMonth) }}
                </div>
            {% endif %}
        </div>
    </div>
    <div class="tab">
        <h3 class="fixedFees">Ajouter des frais fixes</h3>
        
        {{ include('calcul/_form_fixed_fees.html.twig') }}
    </div>
    <div class="tab">
        <h3 class="fixedFees">Ajouter des frais variables</h3>
        
    {{ include('calcul/_form_variable_fees.html.twig') }}
    </div> 
    <div class="tab">
        <h3 class="fixedFees">Ajouter des salariés</h3>
    
    {{ include('calcul/_form_salaries.html.twig') }}
    
    </div>

    <div class="next-prev-section">
        <div>
            <button type="button" id="prevBtn" onclick="nextPrev(-1)"><i class="fa-solid fa-angles-left"></i> Précédent</button>
            <button type="button" id="nextBtn" onclick="nextPrev(1)">Suivant <i class="fa-solid fa-angles-right"></i></button>
        </div>
    </div>

    <!-- Circles which indicates the steps of the form: -->
    <div style="text-align:center;margin-top:40px;">
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
        <span class="step"></span>
    </div>     
</div>

{{ form_end(form, {'render_rest': false})}}

<script type="text/javascript">
    var currentTab = 0; // Current tab is set to be the first tab (0)
    var valid = false;
    showTab(currentTab); // Display the current tab
    
    function showTab(n) {
    // This function will display the specified tab of the form ...
        var x = document.getElementsByClassName("tab");
        x[n].style.display = "block";
        // ... and fix the Previous/Next buttons:
        if (n == 0) {
            document.getElementById("prevBtn").style.display = "none";
        } else {
            document.getElementById("prevBtn").style.display = "inline";
        }
        if (n == (x.length - 1)) {
            document.getElementById("nextBtn").innerHTML = "Valider";
            document.getElementById("nextBtn").style.backgroundColor = "#04AA6D";
        } else {
            document.getElementById("nextBtn").innerHTML = "Suivant <i class='fa-solid fa-angles-right'></i>";
        }
        // ... and run a function that displays the correct step indicator:
        fixStepIndicator(n)
    }
    function nextPrev(n) {
        // This function will figure out which tab to display
        
        // Exit the function if any field in the current tab is invalid:
        validateForm(n);
    }
/////// VALIDATE FORM /////////////////////////////
function validateForm(n) {
    var x, y, i;
    const allForm = document.querySelector('#regForm');
    x = document.getElementsByClassName("tab");
    y = x[currentTab].getElementsByClassName("input");
    const form = new FormData(allForm);
    form.append('tab', currentTab);
    const params = new URLSearchParams();
    form.forEach((key, value) => {
        params.append(key, value);
    })
    //const url = new URL(window.location.href + "?tab=" + currentTab);
    fetch(allForm.action, {
        headers: {
            "X-Requested-With": "XMLHttpRequest"
        },
        method: 'POST',
        body: form,
    })
        .then(response => response.json())
        .then(json => {
            return handleResponse(json,n);
        });
}
////////////////////////////////////////////////////////////
    function fixStepIndicator(n) {
        // This function removes the "active" class of all steps...
        var i, x = document.getElementsByClassName("step");
        
        for (i = 0; i < x.length; i++) {
            x[i].className = x[i].className.replace(" active", "");
        }
        //... and adds the "active" class to the current step:
        x[n].className += " active";
    }
    const handleResponse = function (response, n) {
        removeErrors();
        if(response.code === 'CALCUL_INVALID_FORM') {
            handleErrors(response.errors); 
        } else {
            var x = document.getElementsByClassName("tab");
            x[currentTab].style.display = "none";
        // Increase or decrease the current tab by 1:
            currentTab = currentTab + n;
            // if you have reached the end of the form... :
            if (currentTab >= x.length) {
                window.location.href="/dashboard/calcul/";
            }
            // Otherwise, display the correct tab:
            showTab(currentTab);
        }
}
const removeErrors = function() {
    const invalidFeedbackElements = document.querySelectorAll('.error-message');
    invalidFeedbackElements.forEach(errorElement => errorElement.remove());
}
const handleErrors = function(errors) {
    if (errors.length === 0) return true;
    for (const key in errors) {
        let element = document.querySelector(`#calcul_${key}`);
        let div = document.createElement('div');
        div.classList.add('error-message');
        div.innerText = errors[key];
        element.after(div);
    }
    return false;
}
</script>