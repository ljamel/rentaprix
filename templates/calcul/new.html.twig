{% extends 'base-membre.html.twig' %}

{% block title %}New Calcul{% endblock %}

{% block body %}
    <ul class="breadcrumb">
        <li><a href="{{ path('app_calcul_index') }}">Calcul de rentabilité</a></li>
        <li><a href="{{ path('app_calcul_index') }}">Vos devis</a></li>
        <li>Nouveau calcul</li>
    </ul>
    <div class="back">
        <div class="back-to-list">
            <a href="{{ path('app_calcul_index') }}">Retour à la liste</a>
        </div>
    </div>
    <div class="calcul-data">
        {{ include('calcul/_form.html.twig') }}
    </div>

    <script>
        let currentTab = 0;
        let submit = 0;
        const valid = false;

        showTab(currentTab); // Display the current tab

        function showTab(n) {
            const x = document.getElementsByClassName("tab");
            x[n].style.display = "block";

            if (n === 0) {
                document.getElementById("prevBtn").style.display = "none";
            } else {
                document.getElementById("prevBtn").style.display = "inline";
            }

            if (n === (x.length - 1)) {
                document.getElementById("nextBtn").innerHTML = "Valider";
                document.getElementById("nextBtn").style.backgroundColor = "#04AA6D";
            } else {
                document.getElementById("nextBtn").innerHTML = "Suivant <i class='fa-solid fa-angles-right'></i>";
            }

            if (n === x.length) {
                validateForm(n);
            }
            // ... and run a function that displays the correct step indicator:
            fixStepIndicator(n)
        }
        function nextPrev(n) {
            validateForm(n);
        }
        function validateForm(n) {
            const allForm = document.querySelector('#regForm');
            const form = new FormData(allForm);
            form.append('tab', currentTab);

            fetch(allForm.action, {
                headers: {
                    "X-Requested-With": "XMLHttpRequest"
                },
                method: 'POST',
                body: form,
            })
                .then(response => response.json())
                .then(json => {
                    return handleResponse(json,n);
                });
        }
        function fixStepIndicator(n) {
            let i, x = document.getElementsByClassName("step");

            for (i = 0; i < x.length; i++) {
                x[i].className = x[i].className.replace(" active", "");
            }

            x[n].className += " active";
        }
        const handleResponse = function (response, n) {
            removeErrors();
            if(response.code === 'CALCUL_INVALID_FORM') {
                handleErrors(response.errors);
            } else {
                const x = document.getElementsByClassName("tab");

                x[currentTab].querySelectorAll('input').forEach(e => {
                    e.style.border = "#ccc 1px solid";
                })
                x[currentTab].style.display = "none";
                currentTab = currentTab + n;
                // if you have reached the end of the form... :
                if (currentTab >= x.length) {
                    validateForm(currentTab);
                    window.location.href="/dashboard/calcul/redirect";
                }

                showTab(currentTab);
            }
        }
        const removeErrors = function() {
            const invalidFeedbackElements = document.querySelectorAll('.error-message');
            invalidFeedbackElements.forEach(errorElement => errorElement.remove());
        }
        const handleErrors = function(errors) {
            if (errors.length === 0) return true;
            for (const key in errors) {
                let element = document.querySelector(`#calcul_${key}`);
                let div = document.createElement('div');
                div.classList.add('error-message');
                div.innerText = errors[key];
                element.style.border= "solid 1px #aa3a3c";
                element.after(div);
            }
            return false;
        }

    </script>
{% endblock %}
